package `in`.aicortex.iso8583studio.ui.screens.Emv.applicationCryptogram.emvCrypto41

import ai.cortex.core.ValidationState
import ai.cortex.core.ValidationUtils
import ai.cortex.core.types.CryptogramType
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Reply
import androidx.compose.material.icons.filled.Security
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import `in`.aicortex.iso8583studio.ui.screens.components.CalculatorLogManager
import `in`.aicortex.iso8583studio.ui.screens.components.CalculatorTab
import `in`.aicortex.iso8583studio.ui.screens.components.EnhancedTextField
import `in`.aicortex.iso8583studio.ui.screens.components.InfoDialog
import `in`.aicortex.iso8583studio.ui.screens.components.ModernButton
import `in`.aicortex.iso8583studio.ui.screens.components.ModernCryptoCard
import `in`.aicortex.iso8583studio.ui.screens.components.ModernDropdownField
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch

@Composable
fun ArpcTab(calculatorLogManager: CalculatorLogManager,calculatorTab: CalculatorTab) {
    var sessionKey by remember { mutableStateOf("022551C4FDF76E45988089BA31DC077C") }
    var transactionCryptogram by remember { mutableStateOf("92791D36B5CC31B5") }
    var responseCode by remember { mutableStateOf("Y3") }
    var arpcMethod by remember { mutableStateOf(CryptogramType.ARPC.methods[0]) }
    var isLoading by remember { mutableStateOf(false) }
    var showInfoDialog by remember { mutableStateOf(false) }


    if (showInfoDialog) {
        InfoDialog(
            title = "ARPC Generation Calculation",
            onDismissRequest = { showInfoDialog = false }
        ) {
            Text("The Authorization Response Cryptogram (ARPC) is generated by the issuer/host and sent back to the terminal. It is a MAC over the card's cryptogram and the host's response, proving the host's authenticity to the card.", style = MaterialTheme.typography.body2)
            Spacer(Modifier.height(8.dp))
            Text("Method 1:", fontWeight = FontWeight.Bold)
            Text("1. The card's Transaction Cryptogram (ARQC) is XORed with the 2-byte Authorization Response Code (ARC, e.g., 'Y3' converted to hex) padded with zeros.", style = MaterialTheme.typography.caption)
            Text("2. The result of the XOR is encrypted with the Session Key using Triple-DES.", style = MaterialTheme.typography.caption)
            Text("3. The encrypted result is the ARPC.", style = MaterialTheme.typography.caption)
            Spacer(Modifier.height(8.dp))
            Text("Method 2:", fontWeight = FontWeight.Bold)
            Text("A more complex method involving two separate Single-DES encryptions.", style = MaterialTheme.typography.caption)

        }
    }


    val isFormValid = listOf(
        ValidationUtils.validateHexString(sessionKey, 32),
        ValidationUtils.validateHexString(transactionCryptogram, 16),
        ValidationUtils.validateAlphanumeric(responseCode, 2)
    ).none { it.state == ValidationState.ERROR }

    Column(modifier = Modifier.fillMaxSize().verticalScroll(rememberScrollState()), verticalArrangement = Arrangement.spacedBy(16.dp)) {
        ModernCryptoCard(
            title = "ARPC Generation",
            subtitle = "Generate Authorization Response Cryptogram",
            icon = Icons.Default.Reply,
            onInfoClick = { showInfoDialog = true }
        ) {
            Column(verticalArrangement = Arrangement.spacedBy(16.dp)) {
                EnhancedTextField(
                    value = sessionKey,
                    onValueChange = { if (it.length <= 32 && it.all { c -> c.isDigit() || c.uppercaseChar() in 'A'..'F' }) sessionKey = it.uppercase() },
                    label = "Session Key",
                    placeholder = "32 hex characters",
                    validation = ValidationUtils.validateHexString(sessionKey, 32)
                )
                EnhancedTextField(
                    value = transactionCryptogram,
                    onValueChange = { if (it.length <= 16 && it.all { c -> c.isDigit() || c.uppercaseChar() in 'A'..'F' }) transactionCryptogram = it.uppercase() },
                    label = "Transaction Cryptogram",
                    placeholder = "ARQC/AAC/TC from card",
                    validation = ValidationUtils.validateHexString(transactionCryptogram, 16)
                )
                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(12.dp)) {
                    EnhancedTextField(
                        value = responseCode,
                        onValueChange = { if (it.length <= 2 && it.all { c -> c.isLetterOrDigit() }) responseCode = it.uppercase() },
                        label = "Response Code",
                        placeholder = "e.g., Y3, 8A",
                        modifier = Modifier.weight(1f),
                        validation = ValidationUtils.validateAlphanumeric(responseCode, 2)
                    )
                    ModernDropdownField(label = "ARPC Method", value = arpcMethod.name, options = CryptogramType.ARPC.methods.map { it.name }, onSelectionChanged = { index -> arpcMethod = CryptogramType.ARPC.methods[index] }, modifier = Modifier.weight(1f))
                }
                ModernButton(
                    text = "Generate ARPC",
                    onClick = {
                        isLoading = true
                        val startTime = System.currentTimeMillis()
                        val inputs = mapOf(
                            "Session Key" to sessionKey,
                            "Transaction Cryptogram" to transactionCryptogram,
                            "Response Code" to responseCode,
                            "ARPC Method" to arpcMethod.name
                        )

                        GlobalScope.launch {
                            try {
                                val result = "1A2B3C4D5E6F7890"
                                val executionTime = System.currentTimeMillis() - startTime
                                calculatorLogManager.logOperation(
                                    tab = calculatorTab,
                                    operation = "ARPC Generation",
                                    inputs = inputs,
                                    result = result,
                                    executionTime = executionTime
                                )
                            } catch (e: Exception) {
                                val executionTime = System.currentTimeMillis() - startTime
                                calculatorLogManager.logOperation(
                                    tab = calculatorTab,
                                    operation = "ARPC Generation",
                                    inputs = inputs,
                                    error = e.message ?: "Unknown error occurred",
                                    executionTime = executionTime
                                )
                            } finally {
                                isLoading = false
                            }
                        }
                    },
                    isLoading = isLoading,
                    enabled = isFormValid,
                    icon = Icons.Default.Security,
                    modifier = Modifier.fillMaxWidth()
                )
            }
        }
    }
}